@namespace UI.Layout
@using Bots
@using Bots.HumanAutomation
@using GameEngine
@using Player
@using UI.Services
@inherits LayoutComponentBase
@inject Engine Engine
@inject ChangeNotifier Changes
@inject AlertService Alerts
@inject AlertTextProvider AlertTextProvider
@inject AutomationService Auto
@inject TextProvider L
@inject HttpClient Http

@code {
    private string _buildTime = "Loading...";
    private IPlayer P => Engine.HumanPlayer;
    private IPlayerData D => P.MyData;
    private long? _movesNeed;
    private AutomationSettings A => Auto.Settings;
    private readonly EditContext _editContext;

    public MainLayout(AutomationService auto)
    {
        _editContext = new EditContext(auto.Settings);
        _editContext.OnFieldChanged += async (_, _) => await HandleFieldChanged();
    }

    private async Task HandleFieldChanged()
    {
        A.AttackMoneyDefault = 666;
        Alerts.ShowAlert(OpRes.Ok(MessageType.Todo));
        await Auto.SaveAsync();
        StateHasChanged();
    }

    public async Task SaveAuto()
    {
        await Auto.SaveAsync();
    }

    public void Dispose()
    {
        Changes.OnChange -= StateHasChanged;
    }

    private readonly List<IOperationResult> _alerts = [];

    protected override async Task OnInitializedAsync()
    {
        _buildTime = await Http.GetStringAsync($"buildinfo.txt?v={Guid.NewGuid()}");
        await Auto.LoadAsync();
        Auto.InitializeWith(P.GetAllPlayers());
        Changes.OnChange += StateHasChanged;
        Alerts.OnAlert += (message) =>
        {
            lock (_alerts)
            {
                _alerts.Insert(0, message);
            }

            StateHasChanged();
            // _ = Task.Run(async () =>
            // {
            //     await Task.Delay(3000);
            //     lock (_alerts)
            //     {
            //         _alerts.RemoveAt(_alerts.Count - 1);
            //     }
            //
            //     StateHasChanged();
            // });
        };
    }

    private async Task EndTurns(int turns)
    {
        for (var i = 0; i < turns; ++i)
        {
            await Engine.HumanEndTurn(i + 1 == turns, A);
        }
    }

    private async Task EndTurnsUntilHasMoves()
    {
        while (D.Moves < _movesNeed)
        {
            var shouldUpdate = D.Moves + 15 >= _movesNeed;
            await Engine.HumanEndTurn(shouldUpdate, A);
        }

        _movesNeed = null;
        StateHasChanged();
    }

}

<div class="alert-container">
    @lock (_alerts)
    {
        foreach (var alert in _alerts)
        {
            var alertText = AlertTextProvider.GetMessageText(alert);
            var success = alertText.OverrideSuccess ?? alert.Success;
            <div class="custom-alert @(success ? "ok" : "error")" @key="@alert.Id">
                @alertText.Message
            </div>
        }
    }
</div>

<div id="wrapper">
    <div id="border">
        <div id="header">
            <div class="build-time-info">@_buildTime</div>
            <div id="notice">
                <div id="noticetxt">
                    <table class="human-info-table">
                        <tr>
                            <td>
                                <span class="human-info-value">@Utils.SepThousands(D.Moves)</span>
                            </td>
                            <td>
                                <div class="human-info-label">
                                    <img src="images/icons/kaigud.gif" alt="Käigud" title="Käigud"/>
                                    Käike
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <td><span class="human-info-value">@Utils.SepThousands(D.Money)</span></td>
                            <td>
                                <div class="human-info-label">
                                    <img src="images/icons/raha.gif" alt="Raha" title="Raha"/>
                                    Raha
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <span
                                    class="human-info-value">@Utils.SepThousands(D.GetCash())</span>
                            </td>
                            <td>
                                <div class="human-info-label">
                                    <img src="images/icons/raha.gif" alt="cash-icon" class="cash-icon"/>
                                    Sularaha
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <span
                                    class="human-info-value">@Utils.SepThousands(D.Money - D.GetCash())</span>
                            </td>
                            <td>
                                <div class="human-info-label">
                                    <img src="images/icons/raha.gif" alt="bank-money-icon" class="bank-money-icon"/>
                                    Pangas
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <span
                                    class="human-info-value">@Utils.SepThousands(Calc.PlayerGangTotalDef(D))</span>
                            </td>
                            <td class="human-info-label">
                                <img src="images/icons/kaitse.gif" alt="Turva" title="Turva"/>
                                Turva
                            </td>
                        </tr>
                        <tr>
                            <td><span
                                    class="human-info-value">@Utils.SepThousands(Calc.PlayerGangTotalAtk(D))</span>
                            </td>
                            <td>
                                <div class="human-info-label">
                                    <img src="images/icons/rynne.gif" alt="Maffia" title="Maffia"/>
                                    Maffia
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <td><span class="human-info-value">@Utils.SepThousands(D.Education)</span></td>
                            <td>
                                <div class="human-info-label">
                                    <img src="images/icons/haridus.gif" alt="Haridus" title="Haridus"/>
                                    Haridust
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <td><span class="human-info-value">100%</span></td>
                            <td>
                                <div class="human-info-label">
                                    <img src="images/icons/tervis.gif" alt="Tervis" title="Tervis"/>
                                    Tervis
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <td><span class="human-info-value">Puudub</span></td>
                            <td class="human-info-label">
                                <img src="images/icons/kuulsus.gif" alt="Kuulsus" title="Kuulsus"/>
                                Kuulsust
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
        </div>
        <div id="headermenu" class="nav-top-header">
            <div>
                <img src="images/icons/avaleht.gif" alt="Avaleht" title="Avaleht"/>
                <NavLink href="avaleht">Avaleht</NavLink>
            </div>
            <div>
                <img src="images/icons/edetabel.gif" alt="Edetabel" title="Edetabel"/>
                <NavLink href="edetabel">Edetabel</NavLink>
            </div>

            <div>
                <img src="images/icons/tegevused.gif" alt="Sündmused" title="Sündmused"/>
                <NavLink href="sündmused">Sündmused (<span class="events_unread_html">0</span>)</NavLink>
            </div>
            <div>
                <img src="images/icons/seaded.gif" alt="Konto seaded" title="Konto seaded"/>
                <NavLink href="seaded">Seaded</NavLink>
            </div>
            <div>

                <img src="images/icons/logout.gif" alt="Logi välja" title="Logi välja"/>
                <NavLink href="uus_mäng">Uus mäng</NavLink>
            </div>
        </div>
        <div id="leftcolumn">
            <!-- Start Box -->
            <div id="left">
                <div class="left1h">Uuenda</div>
                <div class="left1">
                    <ul>
                        <li class="update-buttons">
                            <button type="button" @onclick="() => EndTurns(1)" class="upd-button">15m</button>
                            <button type="button" @onclick="() => EndTurns(4)" class="upd-button">1h</button>
                            <button type="button" @onclick="() => EndTurns(16)" class="upd-button">4h</button>
                            <button type="button" @onclick="() => EndTurns(32)" class="upd-button">8h</button>
                            <button type="button" @onclick="() => EndTurns(96)" class="upd-button">1p</button>
                            <button type="button" @onclick="() => EndTurns(2*96)" class="upd-button">2p</button>
                            <button type="button" @onclick="() => EndTurns(4*96)" class="upd-button">4p</button>
                            <button type="button" @onclick="() => EndTurns(8*96)" class="upd-button">8p</button>
                            <button type="button" @onclick="() => EndTurns(16*96)" class="upd-button">16p</button>
                            <button type="button" @onclick="() => EndTurns(32*96)" class="upd-button">32p</button>
                            <button type="button" @onclick="() => EndTurns(64*96)" class="upd-button">64p</button>
                            @* <button type="button" @onclick="() => EndTurns(128*96)" class="upd-button">128p</button> *@
                            @* <button type="button" @onclick="() => EndTurns(256*96)" class="upd-button">256p</button> *@
                            @* <button type="button" @onclick="() => EndTurns(512*96)" class="upd-button">512p</button> *@
                            @* <button type="button" @onclick="() => EndTurns(1024*96)" class="upd-button">1024p</button> *@
                        </li>
                        <li class="update-until">
                            <form @onsubmit="EndTurnsUntilHasMoves">
                                <div>
                                    <input type="number" @bind="_movesNeed" placeholder="Uuenda kuni käike"/>
                                    <button class="upd-button">Uuenda</button>
                                </div>
                            </form>
                        </li>
                    </ul>
                </div>

                <div class="left1h">Menüü</div>
                <div class="left1">
                    <p class="boxTxt1"></p>
                    <div id="menu">
                        <ul>
                            <li>
                                <NavLink href="avaleht">Avaleht</NavLink>
                            </li>
                            <li>
                                <NavLink href="andmed">Andmed</NavLink>
                            </li>
                        </ul>
                        <br>
                        <ul>
                            <li>
                                <NavLink href="pank">Pank</NavLink>
                                <NavLink href="pank?l=arved">(<span class="bills_unpaid_html">0</span>)</NavLink>
                            </li>
                            <li>
                                <NavLink href="aktsiad">Aktsiad (<span class="cryptoPrice">161</span>)</NavLink>
                            </li>
                            <li>
                                <NavLink href="kinnisvara">Kinnisvara</NavLink>
                            </li>
                            <li>
                                <NavLink href="töökoht">Töökoht</NavLink>
                            </li>
                            <li>
                                <NavLink href="turg">Turg</NavLink>
                            </li>
                        </ul>
                        <br>
                        <ul>
                            <li>
                                <NavLink href="haridus">Koolitamine</NavLink>
                            </li>
                            <li>
                                <NavLink href="jõusaal">Jõusaal</NavLink>
                            </li>
                            <li>
                                <NavLink href="kasiino">Kasiino</NavLink>
                            </li>
                            <li>
                                <NavLink href="puskar">Puskar</NavLink>
                            </li>
                        </ul>
                        <br>
                        <ul>
                            <li>
                                <NavLink href="turva">Turva</NavLink>
                            </li>
                            <li>
                                <NavLink href="maffia">Maffia</NavLink>
                            </li>
                            <li>
                                <NavLink href="kaklemine">Kaklemine</NavLink>
                            </li>
                            <li>
                                <NavLink href="spioonid">Spioonid</NavLink>
                            </li>
                            <li>
                                <NavLink href="kamp">Kamp</NavLink>
                            </li>
                            <li>
                                <NavLink href="kambad">Kampade nimekiri</NavLink>
                            </li>
                        </ul>
                        <br>
                        <ul>
                            <li>
                                <NavLink href="kkk">KKK</NavLink>
                            </li>
                            <li>
                                <NavLink href="kontakt">Kontakt</NavLink>
                            </li>
                        </ul>
                    </div>
                    <br>
                    <p></p>
                </div>

                <form @onsubmit="async () => await Auto.SaveAsync()" class="automation-form">
                    <div class="left1h">Automatsioon</div>
                    <div class="left1 automation">
                        <label class="automation-label" for="automation-active">Aktiivne</label>
                        <input class="automation-input" type="checkbox" id="automation-active" @bind="A.IsActive"/>
                        <label class="automation-label" for="automation-reserve">Jäta ründamiseks</label>
                        <input class="automation-input" type="number" id="automation-reserve" @bind="A.MoveReserve"/>
                        <label class="automation-label" for="automation-edu">Haridust</label>
                        <input class="automation-input" type="number" id="automation-edu" placeholder="koolita kuni"
                               @bind="A.EducationLimit"/>
                        <label class="automation-label" for="automation-mafia">Mafioososid</label>
                        <input class="automation-input" type="number" id="automation-mafia" placeholder="palka kuni"
                               @bind="A.MafiaLimit"/>
                        <label class="automation-label" for="automation-guards">Turvasid</label>
                        <input class="automation-input" type="number" id="automation-guards" placeholder="palka kuni"
                               @bind="A.GuardsLimit"/>
                        <label class="automation-label" for="automation-house-lvl">Hoone lvl</label>
                        <input class="automation-input" type="number" id="automation-house-lvl"
                               placeholder="uuenda kuni" @bind="A.HouseLevel"/>
                        <label class="automation-label" for="automation-atk-lvl">Maffia lvl</label>
                        <input class="automation-input" type="number" id="automation-atk-lvl"
                               placeholder="uuenda kuni" @bind="A.AttackLevel"/>
                        <label class="automation-label" for="automation-def-lvl">Turva lvl</label>
                        <input class="automation-input" type="number" id="automation-def-lvl"
                               placeholder="uuenda kuni" @bind="A.DefenseLevel"/>
                        @foreach (var w in Enum.GetValues<Weapon>())
                        {
                            <label class="automation-label" for="automation-@w">@L.GetEnumTranslation(w)</label>
                            <input class="automation-input" type="number" id="automation-@w" placeholder="osta kuni"
                                   @bind="A.WeaponLimits[w]"/>
                        }
                        <label class="automation-label" for="automation-attack-default">Ründa kui käes</label>
                        <input class="automation-input" type="number" id="automation-attack-default" placeholder="raha"
                               @bind="A.AttackMoneyDefault"/>
                        @foreach (var id in P.GetAllPlayers())
                        {
                            if (id != P.Id)
                            {
                                @if (A.PlayerAttackReq.ContainsKey(id))
                                {
                                    <label class="automation-label">
                                        <input type="checkbox" @bind="A.ShouldAttackPlayer[id]"/>
                                        @id
                                    </label>
                                    <input class="automation-input" type="number" placeholder="@A.AttackMoneyDefault"
                                           @bind="A.PlayerAttackReq[id]"/>
                                }
                            }
                        }

                        <button class="automation-save-button">Salvesta</button>
                        <button type="button" class="automation-clean-button"
                                @onclick="async() => await Auto.ClearAsync()">Puhasta
                        </button>
                    </div>
                </form>
            </div>
            <!-- End Box -->
        </div>
        <!-- End Left Column -->
        <!-- Start Right Column -->
        <div id="rightcolumn">
            <!-- Start Main Content -->
            <div class="contentWindow maincontent">
                @Body
            </div>
        </div>
        <!-- End Right Column -->
    </div>
</div>
<div id="langCode" class="ehide">est</div>

<style>
    body {
        background-image: url(images/bg.jpg?v=0);
    }

    #headermenu {
        background-image: url(images/headermenubg.png?v=0);
    }

    #notice {
        background-image: url(images/headertaust.png?v=0);
    }

    #header {
        background-image: url(images/header.jpg?v=0);
    }

    .left1h {
        background-image: url(images/left1.png?v=0);
    }
</style>
