@page "/edetabel"
@using GameEngine
@using Player
@using UI.Services
<PageTitle>Edetabel</PageTitle>
@inject Engine Engine
@inject ChangeNotifier Changes
@inject AlertService Alerts

@code {
    private IPlayer P => Engine.HumanPlayer;
    private IPlayerData D => P.MyData;
    private LeaderboardType _currentLeaderboardType = LeaderboardType.Score;

    protected override void OnInitialized()
    {
        Changes.OnChange += StateHasChanged;
    }

    public enum LeaderboardType
    {
        Score,
        MoneyStolen,
        MoneyLost,
        GuardsKilled,
        GuardsLost,
        MobstersKilled,
        MobstersLost,
        WeaponsStolen,
        WeaponsLost,
    }

    public class PlayerLeaderboardData
    {
        public int LeaderboardRank { get; set; }
        public required string? Name { get; set; }
        public long Score { get; set; }
        public long Cash { get; set; }
        public string? Gang { get; set; }
        public FameLevel Fame { get; set; }
        public required long MoneyStolen { get; init; }
        public required long MoneyLost { get; init; }
        public required long GuardsKilled { get; init; }
        public required long GuardsLost { get; init; }
        public required long MobstersKilled { get; init; }
        public required long MobstersLost { get; init; }
        public required long WeaponsStolen { get; init; }
        public required long WeaponsLost { get; init; }
    }

    public List<PlayerLeaderboardData> GetAllPlayers()
    {
        var players = P.GetAllPlayers();
        var data = new List<PlayerLeaderboardData>();
        
        // Convert to our leaderboard data model
        foreach (var playerId in players)
        {
            var player = P.GetPlayerData(playerId);
            data.Add(new PlayerLeaderboardData
            {
                LeaderboardRank = 0, // Will be set after sorting
                Name = player.Id,
                Score = player.GetScore(),
                Cash = player.GetCash(),
                Gang = null,
                Fame = player.GetFameLevel(),
                MoneyStolen = player.MoneyStolen,
                MoneyLost = player.MoneyLost,
                GuardsKilled = player.GuardsKilled,
                GuardsLost = player.GuardsLost,
                MobstersKilled = player.MobstersKilled,
                MobstersLost = player.MobstersLost,
                WeaponsStolen = player.WeaponsStolen,
                WeaponsLost = player.WeaponsLost,
            });
        }

        // Sort based on selected leaderboard type
        data = SortLeaderboardData(data);

        // Assign ranks after sorting
        for (int i = 0; i < data.Count; i++)
        {
            data[i].LeaderboardRank = i + 1;
        }

        return data;
    }

    private List<PlayerLeaderboardData> SortLeaderboardData(List<PlayerLeaderboardData> data)
    {
        return _currentLeaderboardType switch
        {
            LeaderboardType.Score => data.OrderByDescending(p => p.Score).ToList(),
            LeaderboardType.MoneyStolen => data.OrderByDescending(p => p.MoneyStolen).ToList(),
            LeaderboardType.MoneyLost => data.OrderByDescending(p => p.MoneyLost).ToList(),
            LeaderboardType.GuardsKilled => data.OrderByDescending(p => p.GuardsKilled).ToList(),
            LeaderboardType.GuardsLost => data.OrderByDescending(p => p.GuardsLost).ToList(),
            LeaderboardType.MobstersKilled => data.OrderByDescending(p => p.MobstersKilled).ToList(),
            LeaderboardType.MobstersLost => data.OrderByDescending(p => p.MobstersLost).ToList(),
            LeaderboardType.WeaponsStolen => data.OrderByDescending(p => p.WeaponsStolen).ToList(),
            LeaderboardType.WeaponsLost => data.OrderByDescending(p => p.WeaponsLost).ToList(),
            _ => data.OrderByDescending(p => p.Score).ToList(),
        };
    }

    private void ChangeLeaderboardType(ChangeEventArgs e)
    {
        if (Enum.TryParse<LeaderboardType>(e.Value?.ToString(), out var newType))
        {
            _currentLeaderboardType = newType;
        }
    }

    private string GetLeaderboardDisplayName(LeaderboardType type)
    {
        return type switch
        {
            LeaderboardType.Score => "Skoor",
            LeaderboardType.MoneyStolen => "Raha varastanud",
            LeaderboardType.MoneyLost => "Raha kaotanud",
            LeaderboardType.GuardsKilled => "Turvamehi tapnud",
            LeaderboardType.GuardsLost => "Turvamehi kaotanud",
            LeaderboardType.MobstersKilled => "Mafioososid tapnud",
            LeaderboardType.MobstersLost => "Mafioososid kaotanud",
            LeaderboardType.WeaponsStolen => "Relvi varastanud",
            LeaderboardType.WeaponsLost => "Relvi kaotanud",
            _ => "Skoor"
        };
    }

    private long GetLeaderboardValue(PlayerLeaderboardData player)
    {
        return _currentLeaderboardType switch
        {
            LeaderboardType.Score => player.Score,
            LeaderboardType.MoneyStolen => player.MoneyStolen,
            LeaderboardType.MoneyLost => player.MoneyLost,
            LeaderboardType.GuardsKilled => player.GuardsKilled,
            LeaderboardType.GuardsLost => player.GuardsLost,
            LeaderboardType.MobstersKilled => player.MobstersKilled,
            LeaderboardType.MobstersLost => player.MobstersLost,
            LeaderboardType.WeaponsStolen => player.WeaponsStolen,
            LeaderboardType.WeaponsLost => player.WeaponsLost,
            _ => player.Score
        };
    }

    private string GetClass(string? id)
    {
        if (id == P.Id)
        {
            return "leaderboard-my-name";
        }

        return "";
    }

    private string GetFameClass(FameLevel fame)
    {
        var color = fame switch
        {
            FameLevel.Gray => "gray",
            FameLevel.Green => "green",
            FameLevel.Gold => "gold",
            FameLevel.Darkorange => "darkorange",
            FameLevel.Red => "red",
            FameLevel.Black => "black",
            _ => throw new ArgumentOutOfRangeException(nameof(fame), fame, null),
        };
        return $"fame-{color}";
    }
}

<h1>Mängijad</h1>
<div class="content last leaderboard">

    <table class="fame-table">
        <tbody>
        <tr>
            <td><span
                    style="font-size: 14px; color: silver; text-shadow: 1px 1px 2px gray;">★</span>-
            </td>
            <td><b>Puudub</b></td>
            <td rowspan="6" class="fame-text">Edetabel on järjestatud mängijate edukuse/skoori järjekorras
                alustades edukaimast mängijast.
                Tähekesed nimede ees näitavad kuulsust. Seda saab õnnestunud röövil (2p kui röövid endast kuulsamat,
                1p kui röövid sama kuulsat või vähem kuulsat),
                ebaõnnestumisel kaotad kuulsust (-1p kui röövid endast kuulsamat, -2p kui sama kuulsat või vähem
                kuulsat).
                Iga päev kaotab mängija 10 ühikut kuulsust.
            </td>
        </tr>
        <tr>
            <td><span style="font-size: 14px; color: green; text-shadow: 1px 1px 2px gray;">★</span>-</td>
            <td><b>Madal</b></td>
        </tr>
        <tr>
            <td><span style="font-size: 14px; color: gold; text-shadow: 1px 1px 2px gray;">★</span>-</td>
            <td><b>Keskmine</b></td>
        </tr>
        <tr>
            <td><span style="font-size: 14px; color: darkorange; text-shadow: 1px 1px 2px gray;">★</span>-</td>
            <td><b>Kõrge</b></td>
        </tr>
        <tr>
            <td><span style="font-size: 14px; color: red; text-shadow: 1px 1px 2px gray;">★</span>-</td>
            <td><b>Eliit</b></td>
        </tr>
        <tr>
            <td><span style="font-size: 14px; color: black; text-shadow: 1px 1px 2px gray;">★</span>-</td>
            <td><b>Veteran</b></td>
        </tr>
        </tbody>
    </table>

    <div class="leaderboard-selector">
        <label for="leaderboardType">Edetabeli tüüp:</label>
        <select id="leaderboardType" @onchange="ChangeLeaderboardType">
            @foreach (LeaderboardType type in Enum.GetValues(typeof(LeaderboardType)))
            {
                <option value="@type" selected="@(type == _currentLeaderboardType)">@GetLeaderboardDisplayName(type)</option>
            }
        </select>
    </div>

    <table class="leaderboard-table">
        <colgroup>
            <col class="leaderboard-rank-col"/>
            <col/>
            <col/>
            <col/>
            <col class="leaderboard-col-gang"/>
        </colgroup>
        <tbody>
        <tr>
            <th>
                <div>#</div>
            </th>
            <th>
                <a href="edetabel?jrk=fame&amp;asc=1">
                    <span style="font-size: 14px; color: silver; text-shadow: 1px 1px 2px gray;">★</span> </a>
                <a href="edetabel?jrk=name&amp;asc=1">
                    Nimi </a>
            </th>
            <th>
                @GetLeaderboardDisplayName(_currentLeaderboardType)
            </th>
            <th>
                Sularaha
            </th>
            <th>
                <a href="edetabel?jrk=gang&amp;asc=1">
                    Kamp </a>
            </th>
        </tr>
        @foreach (var p in GetAllPlayers())
        {
            <tr>
                <td>
                    <div class="leaderboard-rank">@p.LeaderboardRank</div>
                </td>
                <td>
                    <span class="@GetFameClass(p.Fame)" style="font-size: 14px; text-shadow: 1px 1px 2px gray;">★</span>
                    <a href="profiil/@p.Name" class="@GetClass(p.Name)">@p.Name</a>
                </td>
                <td class="numeric-td">@Utils.SepThousands(GetLeaderboardValue(p))</td>
                <td class="numeric-td">@Utils.SepThousands(p.Cash)</td>
                <td>
                    @if (p.Gang is { } gang)
                    {
                        <a href="kambad/kamp/@gang">@gang</a>
                    }
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>