@page "/sündmused"
@page "/events"
@using GameEngine
@using UI.Services

@using Player
@inject IndexedDbService Log
@inject AlertTextProvider AlertText
@inject ChangeNotifier Changes
@inject Engine Engine
@inject AlertService Alerts

@code {
    private IPlayer P => Engine.HumanPlayer;
    private IPlayerData D => P.MyData;
    private IList<AttackResult> events = new List<AttackResult>();
    private long currentPage = 0;
    private const long PageSize = 30;
    private long totalPages = 1;
    private long MaxId => Log.CurrentMaxId;

    protected async override Task OnInitializedAsync()
    {
        totalPages = (MaxId / PageSize) + (MaxId % PageSize > 0L ? 1L : 0L);
        currentPage = totalPages - 1; // Default to the last page
        await LoadPage();
        Changes.OnChange += StateHasChanged;
    }

    private async Task LoadPage()
    {
        var startId = currentPage * PageSize;
        events = (await Log.GetRangeAsync(startId, PageSize)).Where(ev => ev.Attacker == P.Id || ev.Defender == P.Id).ToList();
        StateHasChanged();
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages - 1)
        {
            currentPage++;
            await LoadPage();
        }
    }

    private async Task PreviousPage()
    {
        if (currentPage > 0)
        {
            currentPage--;
            await LoadPage();
        }
    }

    private string GetClass(AttackResult atk)
    {
        bool isSucc = atk.Attacker == P.Id && atk.AttackSucceeded || atk.Defender == P.Id && !atk.AttackSucceeded;
        return $"atk-event {(isSucc ? "atk-succ" : "atk-fail")}";
    }

}

<div class="pagination">
    <button @onclick="PreviousPage" disabled="@(@currentPage == 0)">Previous</button>
    <span>Page @(currentPage + 1) of @totalPages</span>
    <button @onclick="NextPage" disabled="@(@currentPage == totalPages - 1)">Next</button>
</div>

@foreach (var atk in events)
{
    <div class="@GetClass(atk)">
        @atk.Attacker -> @atk.Defender (käigul @atk.TurnNumber)
        <p>@AlertText.GetMessageText(atk).Message</p>
    </div>
}